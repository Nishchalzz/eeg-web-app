<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EEG Analysis System</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
      :root {
        --primary-color: #00a8ff;
        --secondary-color: #7b68ee;
        --accent-color: #00e676;
        --dark-bg: #121212;
        --card-bg: #1e1e1e;
        --text-primary: #e0e0e0;
        --text-secondary: #b0b0b0;
        --shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        --transition: all 0.3s ease;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
        color: var(--text-primary);
        background: var(--dark-bg);
        overflow-x: hidden;
      }

      .container {
        width: 100%;
        min-height: 100vh;
      }

      header {
        height: 100vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        position: relative;
        padding: 0 20px;
      }

      #brain-canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
      }

      .header-content {
        background-color: rgba(30, 30, 30, 0.85);
        padding: 40px;
        border-radius: 20px;
        box-shadow: var(--shadow);
        max-width: 700px;
        width: 90%;
        transform: translateY(0);
        opacity: 1;
        transition: var(--transition);
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      h1 {
        font-size: 3.5rem;
        margin-bottom: 1rem;
        color: var(--primary-color);
        text-shadow: 0 0 10px rgba(0, 168, 255, 0.3);
      }

      header p {
        font-size: 1.5rem;
        color: var(--text-secondary);
        margin-bottom: 2rem;
      }

      .scroll-indicator {
        position: absolute;
        bottom: 40px;
        left: 50%;
        transform: translateX(-50%);
        animation: bounce 2s infinite;
        cursor: pointer;
      }

      @keyframes bounce {
        0%,
        20%,
        50%,
        80%,
        100% {
          transform: translateY(0) translateX(-50%);
        }
        40% {
          transform: translateY(-20px) translateX(-50%);
        }
        60% {
          transform: translateY(-10px) translateX(-50%);
        }
      }

      main {
        max-width: 1200px;
        margin: 0 auto;
        padding: 50px 20px;
      }

      .card {
        background-color: var(--card-bg);
        border-radius: 20px;
        box-shadow: var(--shadow);
        padding: 40px;
        margin-bottom: 50px;
        opacity: 0;
        transform: translateY(50px);
        transition: var(--transition);
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      .card.visible {
        opacity: 1;
        transform: translateY(0);
      }

      h2 {
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        font-size: 2.2rem;
      }

      .form-group {
        margin-bottom: 1.5rem;
      }

      label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
        color: var(--text-secondary);
      }

      input[type="text"],
      input[type="number"] {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #333;
        border-radius: 10px;
        font-size: 1rem;
        transition: var(--transition);
        background-color: #2a2a2a;
        color: var(--text-primary);
      }

      input[type="text"]:focus,
      input[type="number"]:focus {
        border-color: var(--primary-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(0, 168, 255, 0.2);
      }

      .form-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 2rem;
      }

      .btn-primary {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 50px;
        font-size: 1rem;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-block;
        font-weight: bold;
      }

      .btn-primary:hover {
        background-color: #0088cc;
        transform: translateY(-2px);
        box-shadow: 0 0 15px rgba(0, 168, 255, 0.4);
      }

      footer {
        text-align: center;
        padding: 30px 20px;
        color: var(--text-secondary);
        background-color: rgba(0, 0, 0, 0.2);
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        border-top: 1px solid rgba(255, 255, 255, 0.05);
      }

      .wave {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100px;
        background: url('data:image/svg+xml;utf8,<svg viewBox="0 0 1200 120" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none"><path d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z" opacity=".25" fill="%2300a8ff"/><path d="M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z" opacity=".5" fill="%2300a8ff"/><path d="M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z" fill="%2300a8ff"/></svg>');
        background-size: 1200px 100px;
        animation: wave 10s linear infinite;
        opacity: 0.3;
      }

      @keyframes wave {
        0% {
          background-position-x: 0;
        }
        100% {
          background-position-x: 1200px;
        }
      }

      .eeg-line {
        position: absolute;
        bottom: 150px;
        left: 0;
        width: 100%;
        height: 50px;
        overflow: hidden;
      }

      .eeg-path {
        stroke: var(--accent-color);
        stroke-width: 2;
        fill: none;
        stroke-dasharray: 1000;
        stroke-dashoffset: 1000;
        animation: dash 15s linear infinite;
      }

      @keyframes dash {
        to {
          stroke-dashoffset: 0;
        }
      }

      .glow {
        text-shadow: 0 0 5px var(--primary-color);
      }

      .chat-container {
        background-color: var(--card-bg);
        border-radius: 20px;
        box-shadow: var(--shadow);
        padding: 20px;
        margin-bottom: 50px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        max-width: 100%;
      }

      #chat-output {
        min-height: 200px;
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 15px;
        padding: 10px;
        background-color: rgba(0, 0, 0, 0.2);
        border-radius: 10px;
      }

      #chat-form {
        display: flex;
        gap: 10px;
      }

      #chat-input {
        flex-grow: 1;
      }

      #chat-form button {
        background-color: var(--accent-color);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 10px;
        font-size: 1rem;
        cursor: pointer;
        transition: var(--transition);
        font-weight: bold;
      }

      #chat-form button:hover {
        background-color: #00c853;
        transform: translateY(-2px);
        box-shadow: 0 0 15px rgba(0, 230, 118, 0.4);
      }

      #chat-output p {
        margin-bottom: 10px;
      }

      #chat-output p strong {
        color: var(--primary-color);
      }
      .user-menu {
        position: relative;
        margin-left: auto;
        padding: 10px 20px;
      }

      .user-info {
        display: flex;
        align-items: center;
        cursor: pointer;
        position: relative;
      }

      .user-name {
        color: var(--text-primary);
        font-weight: bold;
        margin-right: 10px;
      }

      .dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: var(--card-bg);
        border-radius: 10px;
        box-shadow: var(--shadow);
        min-width: 180px;
        overflow: hidden;
        opacity: 0;
        visibility: hidden;
        transform: translateY(10px);
        transition: all 0.3s ease;
        z-index: 1000;
      }

      .user-info:hover .dropdown-menu {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
      }

      .dropdown-menu a {
        display: block;
        padding: 12px 15px;
        color: var(--text-primary);
        text-decoration: none;
        transition: var(--transition);
      }

      .dropdown-menu a:hover {
        background-color: rgba(0, 168, 255, 0.1);
      }

      .logout-btn {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        color: #ff5252 !important;
      }

      /* Updated header styles */
      header {
        height: 100vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        position: relative;
        padding: 0 20px;
        overflow: hidden;
      }

      .header-content {
        background-color: rgba(30, 30, 30, 0.85);
        padding: 40px;
        border-radius: 20px;
        box-shadow: var(--shadow);
        max-width: 700px;
        width: 90%;
        transform: translateY(0);
        opacity: 1;
        transition: var(--transition);
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        z-index: 10;
      }

      .header-buttons {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 2rem;
      }

      .btn-secondary {
        background-color: transparent;
        color: white;
        border: 2px solid var(--secondary-color);
        padding: 12px 24px;
        border-radius: 50px;
        font-size: 1rem;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-block;
        font-weight: bold;
      }

      .btn-secondary:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
        box-shadow: 0 0 15px rgba(123, 104, 238, 0.4);
      }

      /* Updated user menu styles */
      .user-menu {
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 100;
      }

      .user-info {
        display: flex;
        align-items: center;
        cursor: pointer;
        background-color: rgba(30, 30, 30, 0.85);
        padding: 10px 20px;
        border-radius: 50px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(5px);
        transition: var(--transition);
      }

      .user-info:hover {
        background-color: rgba(30, 30, 30, 0.95);
        box-shadow: 0 0 15px rgba(0, 168, 255, 0.2);
      }

      .user-name {
        color: var(--primary-color);
        font-weight: bold;
      }

      .dropdown-menu {
        position: absolute;
        top: 110%;
        right: 0;
        background-color: rgba(30, 30, 30, 0.95);
        border-radius: 15px;
        box-shadow: var(--shadow);
        min-width: 200px;
        overflow: hidden;
        opacity: 0;
        visibility: hidden;
        transform: translateY(10px);
        transition: all 0.3s ease;
        z-index: 1000;
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
      }

      .user-info:hover .dropdown-menu {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
      }

      .dropdown-menu a {
        display: block;
        padding: 15px 20px;
        color: var(--text-primary);
        text-decoration: none;
        transition: var(--transition);
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
      }

      .dropdown-menu a:last-child {
        border-bottom: none;
      }

      .dropdown-menu a:hover {
        background-color: rgba(0, 168, 255, 0.1);
        padding-left: 25px;
      }

      .logout-btn {
        color: #ff5252 !important;
      }

      /* Make wave animation more visible */
      .wave {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100px;
        background: url('data:image/svg+xml;utf8,<svg viewBox="0 0 1200 120" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none"><path d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z" opacity=".25" fill="%2300a8ff"/><path d="M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z" opacity=".5" fill="%2300a8ff"/><path d="M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z" fill="%2300a8ff"/></svg>');
        background-size: 1200px 100px;
        animation: wave 10s linear infinite;
        opacity: 0.4;
      }

      /* Responsive adjustments */
      @media (max-width: 768px) {
        .header-buttons {
          flex-direction: column;
          gap: 10px;
        }

        .user-menu {
          top: 10px;
          right: 10px;
        }

        .user-info {
          padding: 8px 15px;
        }

        .header-content {
          padding: 30px;
        }

        h1 {
          font-size: 2.5rem;
        }
      }
      header {
        height: 100vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        position: relative;
        padding: 0 20px;
        overflow: hidden;
      }

      .header-content {
        background-color: rgba(30, 30, 30, 0.85);
        padding: 40px;
        border-radius: 20px;
        box-shadow: var(--shadow);
        max-width: 700px;
        width: 90%;
        transform: translateY(0);
        opacity: 1;
        transition: var(--transition);
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        z-index: 10;
      }

      .header-buttons {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 2rem;
      }

      .btn-secondary {
        background-color: transparent;
        color: white;
        border: 2px solid var(--secondary-color);
        padding: 12px 24px;
        border-radius: 50px;
        font-size: 1rem;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-block;
        font-weight: bold;
      }

      .btn-secondary:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
        box-shadow: 0 0 15px rgba(123, 104, 238, 0.4);
      }

      /* Updated user menu styles */
      .user-menu {
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 100;
      }

      .user-info {
        display: flex;
        align-items: center;
        cursor: pointer;
        background-color: rgba(30, 30, 30, 0.85);
        padding: 10px 20px;
        border-radius: 50px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(5px);
        transition: var(--transition);
      }

      .user-info:hover {
        background-color: rgba(30, 30, 30, 0.95);
        box-shadow: 0 0 15px rgba(0, 168, 255, 0.2);
      }

      .user-name {
        color: var(--primary-color);
        font-weight: bold;
      }

      .dropdown-menu {
        position: absolute;
        top: 110%;
        right: 0;
        background-color: rgba(30, 30, 30, 0.95);
        border-radius: 15px;
        box-shadow: var(--shadow);
        min-width: 200px;
        overflow: hidden;
        opacity: 0;
        visibility: hidden;
        transform: translateY(10px);
        transition: all 0.3s ease;
        z-index: 1000;
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
      }

      .user-info:hover .dropdown-menu {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
      }

      .dropdown-menu a {
        display: block;
        padding: 15px 20px;
        color: var(--text-primary);
        text-decoration: none;
        transition: var(--transition);
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
      }

      .dropdown-menu a:last-child {
        border-bottom: none;
      }

      .dropdown-menu a:hover {
        background-color: rgba(0, 168, 255, 0.1);
        padding-left: 25px;
      }

      .logout-btn {
        color: #ff5252 !important;
      }

      /* Make wave animation more visible */
      .wave {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100px;
        background: url('data:image/svg+xml;utf8,<svg viewBox="0 0 1200 120" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none"><path d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z" opacity=".25" fill="%2300a8ff"/><path d="M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z" opacity=".5" fill="%2300a8ff"/><path d="M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z" fill="%2300a8ff"/></svg>');
        background-size: 1200px 100px;
        animation: wave 10s linear infinite;
        opacity: 0.4;
      }

      /* Responsive adjustments */
      @media (max-width: 768px) {
        .header-buttons {
          flex-direction: column;
          gap: 10px;
        }

        .user-menu {
          top: 10px;
          right: 10px;
        }

        .user-info {
          padding: 8px 15px;
        }

        .header-content {
          padding: 30px;
        }

        h1 {
          font-size: 2.5rem;
        }
      }

      /* Highlight effect for form when scrolled to from header */
      @keyframes highlightForm {
        0% {
          box-shadow: 0 0 0 rgba(0, 168, 255, 0);
        }
        50% {
          box-shadow: 0 0 30px rgba(0, 168, 255, 0.6);
        }
        100% {
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        }
      }

      .highlight-form {
        animation: highlightForm 2s ease-out;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <
      <header>
        <canvas id="brain-canvas"></canvas>

        <!-- User Menu - Moved inside header for better organization -->
        <div class="user-menu">
          <div class="user-info">
            <span class="user-name">Welcome, <%= userName %></span>
            <div class="dropdown-menu">
              <a href="/dashboard">Dashboard</a>
              <a href="#card-1">Analyze EEG</a>
              <a href="/predict">Predict Seizures</a>
              <a href="/logout" class="logout-btn">Logout</a>
            </div>
          </div>
        </div>

        <div class="header-content">
          <h1>EEG Analysis System</h1>
          <p>
            Advanced neural processing for monitoring and seizure prediction
          </p>
          <div class="header-buttons">
            <a href="#main-content" class="btn-primary">Explore Features</a>
            <a href="#card-1" class="btn-secondary">Start Analysis</a>
          </div>
        </div>

        <div class="scroll-indicator">
          <svg
            width="40"
            height="40"
            viewBox="0 0 24 24"
            fill="none"
            stroke="var(--primary-color)"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="M12 5v14"></path>
            <path d="M19 12l-7 7-7-7"></path>
          </svg>
        </div>
        <div class="wave"></div>
      </header>

      <main id="main-content">
        <div class="card" id="card-1">
          <h2>Patient EEG Analysis</h2>
          <p>
            Enter patient information to begin real-time EEG analysis and
            monitoring.
          </p>
          <form action="/analyze" method="POST">
            <div class="form-group">
              <label for="patientId">Patient ID:</label>
              <input
                type="text"
                id="patientId"
                name="patientId"
                placeholder="Enter patient identification number"
                required
              />
            </div>

            <div class="form-group">
              <label for="duration">Recording Duration (seconds):</label>
              <input
                type="number"
                id="duration"
                name="duration"
                value="60"
                min="5"
                max="300"
                required
              />
            </div>

            <div class="form-actions">
              <button type="submit" class="btn-primary">
                Start EEG Analysis
              </button>
            </div>
          </form>
        </div>

        <div class="card" id="card-2">
          <h2>Seizure Prediction</h2>
          <p>
            Upload existing EDF files to our advanced machine learning model for
            precise seizure prediction and analysis. Our neural network has been
            trained on thousands of EEG recordings to provide exceptional
            accuracy in detecting early seizure patterns.
          </p>
          <div class="form-actions">
            <a href="/predict" class="btn-primary">Go to Seizure Prediction</a>
          </div>
        </div>

        <div class="chat-container">
          <div id="chat-output"></div>
          <form id="chat-form" data-page="home">
            <input
              type="text"
              id="chat-input"
              placeholder="Ask me anything..."
            />
            <button type="submit">Send</button>
          </form>
        </div>
      </main>

      <footer>
        <p>
          &copy; 2025 EEG Analysis System - Advanced Neural Monitoring
          Technology
        </p>
      </footer>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const canvas = document.getElementById("brain-canvas");
        const renderer = new THREE.WebGLRenderer({
          canvas: canvas,
          antialias: true,
          alpha: true,
        });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);

        const scene = new THREE.Scene();

        const camera = new THREE.PerspectiveCamera(
          45,
          window.innerWidth / window.innerHeight,
          0.1,
          1000
        );
        camera.position.z = 20;

        const ambientLight = new THREE.AmbientLight(0x222222, 2);
        scene.add(ambientLight);

        const directionalLight = new THREE.DirectionalLight(0x00a8ff, 2);
        directionalLight.position.set(10, 10, 10);
        scene.add(directionalLight);

        function createBrain() {
          const brainGroup = new THREE.Group();

          const hemisphereGeometry = new THREE.SphereGeometry(
            5,
            32,
            32,
            0,
            Math.PI * 2,
            0,
            Math.PI / 2
          );

          const leftMaterial = new THREE.MeshPhongMaterial({
            color: 0x00a8ff,
            transparent: true,
            opacity: 0.6,
            wireframe: false,
            emissive: 0x00a8ff,
            emissiveIntensity: 0.2,
          });
          const leftHemisphere = new THREE.Mesh(
            hemisphereGeometry,
            leftMaterial
          );
          leftHemisphere.rotation.z = Math.PI;
          leftHemisphere.position.x = -0.5;

          const rightMaterial = new THREE.MeshPhongMaterial({
            color: 0x7b68ee,
            transparent: true,
            opacity: 0.6,
            wireframe: false,
            emissive: 0x7b68ee,
            emissiveIntensity: 0.2,
          });
          const rightHemisphere = new THREE.Mesh(
            hemisphereGeometry,
            rightMaterial
          );
          rightHemisphere.position.x = 0.5;

          for (let i = 0; i < 150; i++) {
            const lineGeometry = new THREE.BufferGeometry();

            const x1 = (Math.random() - 0.5) * 10;
            const y1 = (Math.random() - 0.5) * 10;
            const z1 = (Math.random() - 0.5) * 10;

            const x2 = (Math.random() - 0.5) * 10;
            const y2 = (Math.random() - 0.5) * 10;
            const z2 = (Math.random() - 0.5) * 10;

            const r1 = Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
            const r2 = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);

            if (r1 < 5 && r2 < 5) {
              const points = [
                new THREE.Vector3(x1, y1, z1),
                new THREE.Vector3(x2, y2, z2),
              ];

              lineGeometry.setFromPoints(points);

              const lineMaterial = new THREE.LineBasicMaterial({
                color: 0x00e676,
                transparent: true,
                opacity: 0.4,
              });

              const line = new THREE.Line(lineGeometry, lineMaterial);
              brainGroup.add(line);
            }
          }

          brainGroup.add(leftHemisphere);
          brainGroup.add(rightHemisphere);

          const pulsesGroup = new THREE.Group();
          for (let i = 0; i < 70; i++) {
            const geometry = new THREE.SphereGeometry(0.05, 8, 8);
            const material = new THREE.MeshBasicMaterial({
              color: 0x00e676,
              transparent: true,
              opacity: 0.8,
            });

            const pulse = new THREE.Mesh(geometry, material);

            const theta = Math.random() * Math.PI * 2;
            const phi = Math.random() * Math.PI;
            const radius = Math.random() * 4.5;

            pulse.position.x = radius * Math.sin(phi) * Math.cos(theta);
            pulse.position.y = radius * Math.sin(phi) * Math.sin(theta);
            pulse.position.z = radius * Math.cos(phi);

            pulse.userData = {
              speed: 0.02 + Math.random() * 0.05,
              opacity: 0.3 + Math.random() * 0.7,
              opacityDir: Math.random() > 0.5 ? 1 : -1,
              scale: 0.8 + Math.random() * 0.4,
            };

            pulsesGroup.add(pulse);
          }

          brainGroup.add(pulsesGroup);
          brainGroup.userData = { pulsesGroup: pulsesGroup };

          return brainGroup;
        }

        const brain = createBrain();
        scene.add(brain);

        const starsGeometry = new THREE.BufferGeometry();
        const starsMaterial = new THREE.PointsMaterial({
          color: 0xffffff,
          size: 0.1,
          transparent: true,
          opacity: 0.8,
        });

        const starsVertices = [];
        for (let i = 0; i < 1000; i++) {
          const x = (Math.random() - 0.5) * 100;
          const y = (Math.random() - 0.5) * 100;
          const z = (Math.random() - 0.5) * 100;
          starsVertices.push(x, y, z);
        }

        starsGeometry.setAttribute(
          "position",
          new THREE.Float32BufferAttribute(starsVertices, 3)
        );
        const stars = new THREE.Points(starsGeometry, starsMaterial);
        scene.add(stars);

        function animate() {
          requestAnimationFrame(animate);

          brain.rotation.y += 0.003;
          brain.rotation.x = Math.sin(Date.now() * 0.0005) * 0.1;

          const pulses = brain.userData.pulsesGroup.children;
          pulses.forEach((pulse) => {
            pulse.material.opacity +=
              pulse.userData.opacityDir * pulse.userData.speed;

            const scale =
              0.8 + 0.5 * Math.sin(Date.now() * 0.001 * pulse.userData.scale);
            pulse.scale.set(scale, scale, scale);

            if (pulse.material.opacity > 0.9) {
              pulse.userData.opacityDir = -1;
            } else if (pulse.material.opacity < 0.3) {
              pulse.userData.opacityDir = 1;

              if (Math.random() > 0.95) {
                const theta = Math.random() * Math.PI * 2;
                const phi = Math.random() * Math.PI;
                const radius = Math.random() * 4.5;

                pulse.position.x = radius * Math.sin(phi) * Math.cos(theta);
                pulse.position.y = radius * Math.sin(phi) * Math.sin(theta);
                pulse.position.z = radius * Math.cos(phi);
              }
            }
          });

          stars.rotation.y += 0.0002;

          renderer.render(scene, camera);
        }

        animate();

        window.addEventListener("resize", function () {
          camera.aspect = window.innerWidth / window.innerHeight;
          camera.updateProjectionMatrix();
          renderer.setSize(window.innerWidth, window.innerHeight);
        });

        function checkScroll() {
          const cards = document.querySelectorAll(".card");

          cards.forEach((card) => {
            const cardTop = card.getBoundingClientRect().top;
            const windowHeight = window.innerHeight;

            if (cardTop < windowHeight * 0.8) {
              card.classList.add("visible");
            }
          });
        }

        checkScroll();

        window.addEventListener("scroll", checkScroll);

        document
          .querySelector(".scroll-indicator")
          .addEventListener("click", function (e) {
            e.preventDefault();
            document.querySelector("#main-content").scrollIntoView({
              behavior: "smooth",
            });
          });

        document
          .querySelector(".header-content .btn-primary")
          .addEventListener("click", function (e) {
            e.preventDefault();
            document.querySelector("#main-content").scrollIntoView({
              behavior: "smooth",
            });
          });
      });

      document.addEventListener("DOMContentLoaded", function () {
        // User dropdown menu toggle
        const userInfo = document.querySelector(".user-info");
        const dropdownMenu = document.querySelector(".dropdown-menu");

        if (userInfo && dropdownMenu) {
          userInfo.addEventListener("click", function (e) {
            e.stopPropagation();
            dropdownMenu.classList.toggle("show");
          });

          // Close the dropdown when clicking elsewhere
          document.addEventListener("click", function () {
            dropdownMenu.classList.remove("show");
          });
        }
      });
      document.addEventListener("DOMContentLoaded", function () {
        // Smooth scroll for all buttons linking to page sections
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener("click", function (e) {
            e.preventDefault();

            const targetId = this.getAttribute("href");
            const targetElement = document.querySelector(targetId);

            if (targetElement) {
              // Scroll smoothly to the target element
              targetElement.scrollIntoView({
                behavior: "smooth",
                block: "start",
              });

              // If it's the analysis section, highlight the form and focus on the patient ID input
              if (targetId === "#card-1") {
                // Wait for the scroll to complete before focusing
                setTimeout(() => {
                  // Add highlight effect to the form
                  targetElement.classList.add("highlight-form");

                  // Focus on the patient ID input
                  const patientIdInput = document.getElementById("patientId");
                  if (patientIdInput) {
                    patientIdInput.focus();
                  }

                  // Remove highlight class after animation completes
                  setTimeout(() => {
                    targetElement.classList.remove("highlight-form");
                  }, 2000);
                }, 800); // 0.8 second delay to allow scroll to complete
              }
            }
          });
        });
      });
    </script>
    <script src="/js/main.js"></script>
  </body>
</html>
